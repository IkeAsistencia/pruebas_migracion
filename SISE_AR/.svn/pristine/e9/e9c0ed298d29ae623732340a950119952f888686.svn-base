package Utilerias;

import java.sql.SQLException;
import javax.mail.*;
import javax.mail.Address;
import javax.mail.internet.*;
import javax.activation.*;

import java.util.StringTokenizer;
import java.util.Properties;
import java.util.ArrayList;
import java.util.Date;
import java.sql.ResultSet;
import java.io.*;

public class EnviaCorreo {

    private static ResultSet rs = null;
    //private final Transport bus = null;
    //private static StringBuffer StrSQL = new StringBuffer();
    private static StringTokenizer st;
    private static boolean isStarted = false;

    public EnviaCorreo() {
    }

    public static boolean getEstatus() {
        return isStarted;
    }

    public static synchronized void EnviaCorreos() {
        String from = "";
        //String clUsrApp = "";
        String destinatarios = "";
        String smtpHost = "";
        String rMail = "";
        String Archivo = "";
        String Imagen = "";
        String figura = "";
        String Adjunto = "";
        String ArchivoAdjStr = "";
        String clMensajeStr = "";

        try {

            rs = UtileriasBDF.rsSQLNP(" st_getMensajesMail ");

            try {
                while (rs.next()) {
                    clMensajeStr = rs.getString("clMensaje");

                    // Obtener el from y los destinatarios recibidos como parámetros
                    destinatarios = rs.getString("Destinatario").toString().trim();
                    smtpHost = "172.21.16.15";
                    //smtpHost = "201.116.36.211";
                    //smtpHost = rs.getString("Host");
                    //clUsrApp = rs.getString("clUsrApp").toString().trim();

                    from = rs.getString("Correo").toString().trim();

                    // Obtener las propiedades del sistema y establecer el servidor
                    // SMTP que vamos a usar
                    Properties props = System.getProperties();
                    props.put("mail.smtp.host", smtpHost);
                    /*------------------------------------ Mod2: Autenticación ------------------------------------*/
                    //props.put("mail.smtp.auth", "true");
                    props.put("mail.smtp.auth", "false");

                    Authenticator auth = new Autenticador();
                    Session sesion = Session.getDefaultInstance(props, auth);
                    /*---------------------------------------------------------------------------------------------*/

                    Message mensaje = new MimeMessage(sesion);
                    // Rellenar los atributos y el contenido
                    // Asunto
                    mensaje.setSubject(rs.getString("Asunto").toString());
                    // Emisor del mensaje
                    mensaje.setFrom(new InternetAddress(from));

//--------------------------------------- Mod: Prepara los recipientes para el envio de correo ---------------------------------------------------
                    st = new StringTokenizer(destinatarios, "|");
                    ArrayList recipientes = new ArrayList();
                    ArrayList Destinatarios = new ArrayList();

                    while (st.hasMoreTokens()) {
                        rMail = st.nextToken();
                        recipientes.add(rMail.trim());
                    }

                    for (int i = 0; i < recipientes.size(); i++) {
                        st = new StringTokenizer(recipientes.get(i).toString(), ",");
                        while (st.hasMoreTokens()) {
                            Address mail = new InternetAddress(st.nextToken().toString());
                            Destinatarios.add(mail);
                        }
                        if (i == 0) { // TO
                            mensaje.addRecipients(Message.RecipientType.TO, obtenerListaDeDirecciones(mensaje, Destinatarios));
                        } else if (i == 1) { // BCC
                            mensaje.addRecipients(Message.RecipientType.BCC, obtenerListaDeDirecciones(mensaje, Destinatarios));
                        } else if (i == 2) { // CC
                            mensaje.addRecipients(Message.RecipientType.CC, obtenerListaDeDirecciones(mensaje, Destinatarios));
                        }
                    }
//---------------------------------------------------------------------------------------------------------------------------*/
                    // Crear un Multipart de tipo multipart/related
                    Multipart multipart = new MimeMultipart("related");

                    // Rellenar el MimeBodyPart con el fichero e indicar que es un fichero HTML
                    BodyPart texto = new MimeBodyPart();
                    texto.setContent(rs.getString("Cuerpo").toString(), "text/html");
                    multipart.addBodyPart(texto);

//--------------------------------------- Mod: Adjunta imagenes en el correo (Embebidas) ---------------------------------------------------
                    Archivo = rs.getString("Archivo").toString().trim();

                    if (Archivo.indexOf("/") != -1 || Archivo.indexOf("\\") != -1) {
                        st = new StringTokenizer(Archivo, "|");
                        ArrayList Imagenes = new ArrayList();

                        while (st.hasMoreTokens()) {
                            Imagen = st.nextToken();
                            Imagenes.add(Imagen);
                        }

                        MimeBodyPart imagen[] = new MimeBodyPart[Imagenes.size()];
                        DataSource fds[] = new DataSource[Imagenes.size()];

                        for (int i = 0; i < Imagenes.size(); i++) {
                            imagen[i] = new MimeBodyPart();
                            fds[i] = new FileDataSource(Imagenes.get(i).toString());
                            imagen[i].setDataHandler(new DataHandler(fds[i]));
                            figura = "<figura" + (i + 1) + ">";
                            imagen[i].setHeader("Content-ID", figura);
                            multipart.addBodyPart(imagen[i]);
                        }
                    }
//--------------------------------------- Mod 1: Adjunta Todo tipo de archivos en el correo ------------------------------------
                    Adjunto = rs.getString("Adjuntos").toString().trim();

                    if (Adjunto.indexOf("/") != -1 || Adjunto.indexOf("\\") != -1) {
                        st = new StringTokenizer(Adjunto, "|");
                        ArrayList ArchivosAdjuntos = new ArrayList();

                        while (st.hasMoreTokens()) {
                            ArchivoAdjStr = st.nextToken();
                            ArchivosAdjuntos.add(ArchivoAdjStr);
                        }

                        MimeBodyPart ArchivoAdj[] = new MimeBodyPart[ArchivosAdjuntos.size()];
                        DataSource fds[] = new DataSource[ArchivosAdjuntos.size()];

                        for (int i = 0; i < ArchivosAdjuntos.size(); i++) {
                            ArchivoAdj[i] = new MimeBodyPart();
                            File path = new File(ArchivosAdjuntos.get(i).toString());
                            fds[i] = new FileDataSource(path);
                            ArchivoAdj[i].setDataHandler(new DataHandler(fds[i]));
                            ArchivoAdj[i].setFileName(path.getName());
                            multipart.addBodyPart(ArchivoAdj[i]);
                        }
                    }
//---------------------------------------------------------------------------------------------------------------------------*/
                    mensaje.setContent(multipart);
                    mensaje.setSentDate(new Date());

                    try {
                        Transport.send(mensaje);
                        System.out.println("mail enviado ");
                        EjecutaActualizaMensajesMail.ActualizaEnviado(Integer.valueOf(clMensajeStr), 1);
                        //System.out.println("clmensaje actualizado ");                    

                    } catch (MessagingException ex) {
                        EjecutaActualizaMensajesMail.ActualizaEnviado(Integer.valueOf(clMensajeStr), 2);
                        System.out.println("Error en send(mensaje)");
                        ex.printStackTrace();
                    }
                }

            } catch (NumberFormatException ex) {
                System.out.println("Error en NumberFormatException");
                ex.printStackTrace();
            } catch (AddressException ex) {
                System.out.println("Error en AddressException");
                EjecutaActualizaMensajesMail.ActualizaEnviado(Integer.valueOf(clMensajeStr), 2);
                ex.printStackTrace();
            } catch (MessagingException ex) {
                System.out.println("Error en MessagingException");
                EjecutaActualizaMensajesMail.ActualizaEnviado(Integer.valueOf(clMensajeStr), 2);
                ex.printStackTrace();
            } catch (SQLException ex) {
                System.out.println("Error en SQLException (conexion)");
                ex.printStackTrace();
            }
        } catch (Exception SFE) {
            SFE.printStackTrace();
            //EjecutaActualizaMensajesMail.ActualizaEnviado(Integer.valueOf(clMensajeStr),2);
            System.out.println("Error en EnviaCorreo.java");
        } finally {
            try {

                //StrSQL.delete(0, StrSQL.length());
                rs = null;

                from = null;
                //clUsrApp = null;
                destinatarios = null;
                smtpHost = null;
                rMail = null;
                Archivo = null;
                Imagen = null;
                figura = null;
                Adjunto = null;
                ArchivoAdjStr = null;
                clMensajeStr = null;
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }
    }

    public static Address[] obtenerListaDeDirecciones(Message mensaje, ArrayList Destinatarios) throws javax.mail.MessagingException {
        Address address[] = new Address[Destinatarios.size()];
        for (int j = 0; j < Destinatarios.size(); j++) {
            address[j] = (InternetAddress) Destinatarios.get(j);
        }
        Destinatarios.clear();
        return address;
    }

    public static void Start() {
        chStatus(true);
        TimerEnviaCorreo.Start();
    }

    public static void Stop() {
        chStatus(false);
    }

    private static void chStatus(boolean pEstatus) {
        isStarted = pEstatus;
    }

    /*------------------------------------ Mod2: Autenticación ------------------------------------*/
    private static class Autenticador extends Authenticator {

        public PasswordAuthentication getPasswordAuthentication() {
            ResultSet rs = null;
            //StringBuilder StrSQL = new StringBuilder();
            //StrSQL.append("st_MailAutentification");
            //rs = UtileriasBDF.rsSQLNP(StrSQL.toString());
            rs = UtileriasBDF.rsSQLNP("st_MailAutentification");

            try {
                if (rs.next()) {
                    return new PasswordAuthentication(rs.getString("usr"), rs.getString("pwd"));
                } else {
                    return new PasswordAuthentication("", "");
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
                return new PasswordAuthentication("", "");
            } finally {
                //StrSQL.delete(0, StrSQL.length());
                rs = null;
            }
        }
    }
    /*---------------------------------------------------------------------------------------------*/
}
